# -*- coding: utf-8 -*-
"""Exercise - IDX Partners Data Scientist-checkpoint.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WomyJzTWTv1m119b3xbOx5ppfHaaT_ED

# TASK 1
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv('application_record.csv')
application = pd.read_csv('application_record.csv')
df_application = pd.read_csv('application_record.csv')
credit = pd.read_csv('credit_record.csv')

application.info()

application.head()

application.tail()

"""# TASK 2"""

application [['CODE_GENDER']].head()

one_hot=pd.get_dummies(application['CODE_GENDER'],drop_first=True)
one_hot.head()

from sklearn import preprocessing 
label_encoder = preprocessing.LabelEncoder()
df_application['NAME_EDUCATION_TYPE_enc']=label_encoder.fit_transform(df_application['NAME_EDUCATION_TYPE'])
df_application[['NAME_EDUCATION_TYPE','NAME_EDUCATION_TYPE_enc']].head()

from sklearn import preprocessing
ss = preprocessing.StandardScaler()
df_application['AMT_INCOME_TOTAL_scaled']=ss.fit_transform(df_application[['AMT_INCOME_TOTAL']])
df_application[['AMT_INCOME_TOTAL','AMT_INCOME_TOTAL_scaled']].head()

df_application[['DAYS_BIRTH']].head()

df_application['AGE'] = df_application['DAYS_BIRTH']/-365 
df_application['AGE'] = df_application['AGE'].round(decimals=0)

df_application[['DAYS_BIRTH','AGE']].head()

df_application['OCCUPATION_TYPE'].isnull().sum()

df_application['OCCUPATION_TYPE'].fillna('Unknown', inplace=True)
df_application['OCCUPATION_TYPE'] = 'Unknown'
df_application['OCCUPATION_TYPE'] = df_application['OCCUPATION_TYPE'].fillna('Unknown')

df_application['OCCUPATION_TYPE'].isnull().sum()

type(df_application.ID.values[0])

df_application.ID = df_application.ID.astype(str)

type(df_application.ID.values[0])

df_application.drop(['ID', 'CODE_GENDER'], axis=1, inplace=False)

"""# TASK 3"""

df['AGE'] = df['DAYS_BIRTH']/-365 
df['AGE'] = df['AGE'].round(decimals=0)
df

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

plt.plot(df['AMT_INCOME_TOTAL'],df['AGE'])
plt.ylabel('Income Total')
plt.xlabel('Age')
plt.show()

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

plt.figure(figsize=(12,6))
plt.plot([1,2,3,4],[2,4,6,8])
plt.ylabel('label y')
plt.xlabel('label x')
plt.show()

sns.countplot(data=df, y='NAME_EDUCATION_TYPE')

sns.countplot(data=df, x='FLAG_PHONE')

sns.displot(df['AGE'],bins=20)

sns.boxplot(x=df["AGE"])
plt.show()

sns.displot(df['AGE'],bins=[0,10,20,30])

df_good = df[df['AMT_INCOME_TOTAL'].isin(['C','0','1','2'])]
df_bad = df[-df['AMT_INCOME_TOTAL'].isin(['C','0','1','2'])]

sns.displot(df_good['AMT_INCOME_TOTAL'], label='good')
sns.displot(df_bad['AMT_INCOME_TOTAL'], label='bad')
plt.legend()

from plotnine.data import mpg
from plotnine import ggplot, aes, geom_point

ggplot(mpg,aes(x='displ', y='hwy', color='class')) + geom_point()